class Solution {
    public int minDistance(String word1, String word2) {
        /*
                s e a
            e   2 1 2
            a   3 2 1 
            t   4 3 2
            
            if 2 single letters are not equal, then costs 2 operation
            if new characters are equal, equal to diagonal left
                if there's no diagional left, then = dif in their length
            if new characters not equal, equal smallest of (previous left, above right) +1
                
                l e e t c o d e
            e   2 1 2 3 4 5 6 7
            t   3 2 3 2 3 4 5 6
            c   4 3 4 3 2 3 4 5
            o   5 4 5 4 3 2 3 4 
            
                e t c o
            l   2 3 4 5 
            e   1 2 3 4
            e   2 3 4 5
            t   3 2 3 4
            c   3 3 2 3
            o   5 4 3 2
            e   6 5 4 3
            d   7 6 5 4
            
                e a t
            s   2 3 4
            e   1 2 3
            a   2 1 2
            
        */
        
        int[][] costs = new int[word1.length()][word2.length()];
        
        for(int i = 0; i < word1.length(); i++) {
            for(int j = 0; j < word2.length(); j++) {
                if( word1.charAt(i) == word2.charAt(j) ) {
                    // if they are equal, check whether or not they are at rear
                    if(i == 0 || j ==0) {
                        costs[i][j] = Math.abs(word1.substring(0, i).length() - word2.substring(0, j).length());
                        //System.out.println("current " + word1.charAt(i) + " and " + word2.charAt(j) + " and " + costs[i][j]);
                    }
                        
                    else 
                        costs[i][j] = costs[i-1][j-1];
                } else {
                    
                    // special case
                    if(i == 0 && j == 0)
                        costs[i][j] = 2;
                    else {
                        int row_above = Integer.MAX_VALUE;
                        int col_left = Integer.MAX_VALUE;
                        if(j-1 >= 0)
                            row_above = costs[i][j-1];
                        if(i-1 >= 0)
                            col_left = costs[i-1][j];
                        costs[i][j] = Math.min(row_above, col_left) +1;
                    }
                  
                }
            }
        }
        
        // for(int i = 0; i < costs.length; i++) {
        //     for(int j = 0; j < costs[i].length; j++) {
        //         System.out.print(costs[i][j] + " ");
        //     }
        //     System.out.println();
        // }
        return costs[word1.length()-1][word2.length()-1];
    }
    
}
